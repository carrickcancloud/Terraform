# This CI/CD pipeline deploys the Project Anvil infrastructure using Terraform.
# It is designed to be triggered manually from the GitHub Actions UI, allowing
# an operator to choose the target environment and application version to deploy.

name: 'Anvil: Deploy - 1 - Environment - Infrastructure'

on:
  # This makes the workflow manually triggerable.
  workflow_dispatch:
    # These are the input fields that will be presented to the user in the UI.
    inputs:
      target_environment:
        description: 'The environment to deploy to (dev, qa, uat, or prod)'
        required: true
        type: choice
        options:
          - dev
          - qa
          - uat
          - prod
      
      ami_version:
        description: 'The AMI version to deploy (e.g., the Git commit hash like "7a4a2ae")'
        required: true
        type: string

# Grant the necessary permissions for keyless OIDC authentication with AWS.
permissions:
  id-token: write
  contents: read

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    
    # This optional setting integrates with GitHub's "Environments" feature for protection rules.
    environment: ${{ github.event.inputs.target_environment }}
    
    # All steps in this job will run from inside the 'anvil' directory.
    defaults:
      run:
        working-directory: ./anvil

    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4

      # In a real pipeline, a step to download artifacts (like the cms_version.txt)
      # from the AMI build pipeline would go here.
      - name: 'Create Placeholder Artifacts for Local Testing'
        run: |
          mkdir -p dist
          echo "6.9.1" > dist/cms_version.txt # Placeholder version

      - name: 'Configure AWS Credentials'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # Use the dedicated IAM role for Terraform deployments.
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_FOR_ANVIL }}
          aws-region: us-east-1

      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v3

      - name: 'Prepare Dynamic Variables'
        id: prep
        run: |
          # Generate the build timestamp in the required RFC3339 format.
          BUILD_TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "BUILD_TIMESTAMP=$BUILD_TIMESTAMP" >> $GITHUB_ENV
          echo "Generated Timestamp: $BUILD_TIMESTAMP"
          
          # Read the CMS version from the downloaded artifact.
          CMS_VERSION=$(cat dist/cms_version.txt)
          echo "CMS_VERSION=$CMS_VERSION" >> $GITHUB_ENV
          echo "Using CMS Version: $CMS_VERSION"

      - name: 'Terraform Init'
        id: init
        # The backend config file is dynamically selected based on the user's dropdown input.
        run: |
          echo "Initializing for environment: ${{ github.event.inputs.target_environment }}"
          terraform init -backend-config="config/${{ github.event.inputs.target_environment }}.s3.tfbackend"

      - name: 'Terraform Workspace Select'
        run: terraform workspace select ${{ github.event.inputs.target_environment }} || terraform workspace new ${{ github.event.inputs.target_environment }}

      - name: 'Terraform Plan'
        id: plan
        run: |
          echo "Planning deployment of AMI version ${{ github.event.inputs.ami_version }} to ${{ github.event.inputs.target_environment }}"
          terraform plan \
            -var="build_timestamp=${{ env.BUILD_TIMESTAMP }}" \
            -var="cms_version=${{ env.CMS_VERSION }}" \
            -var="ami_version=${{ github.event.inputs.ami_version }}" \
            -var-file="environments/${{ github.event.inputs.target_environment }}.tfvars" \
            -no-color \
            -out=tfplan

      - name: 'Upload Plan Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ github.event.inputs.target_environment }}
          path: anvil/tfplan

  terraform-apply:
    name: 'Terraform Apply'
    # This job will only run after the 'plan' job is complete.
    needs: terraform-plan
    runs-on: ubuntu-latest

    # This job is subject to the protection rules of the specified environment.
    # The approval will happen here before the job starts.
    environment: ${{ github.event.inputs.target_environment }}

    defaults:
      run:
        working-directory: ./anvil

    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4

      - name: 'Configure AWS Credentials'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_FOR_ANVIL }}
          aws-region: us-east-1

      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v3

      - name: 'Download Plan Artifact'
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ github.event.inputs.target_environment }}
          path: anvil/

      - name: 'Terraform Apply'
        run: |
          echo \"Applying plan for AMI version ${{ github.event.inputs.ami_version }} to ${{ github.event.inputs.target_environment }}\"
          terraform apply -auto-approve tfplan
