# This CI/CD pipeline is the "AMI Factory" for Project Anvil.
# It builds environment-specific Golden AMIs, scans them for vulnerabilities,
# uploads reports to an isolated S3 bucket, and stores the final AMI IDs in SSM.

name: 'Anvil: Build - Golden AMIs'

on:
  # Allow manual triggering from the GitHub UI's "Actions" tab.
  workflow_dispatch:
    inputs:
      target_environment:
        description: 'The target environment for this build (determines vulnerability report destination)'
        required: true
        type: choice
        options:
          - dev
          - qa
          - uat
          - prod

permissions:
  id-token: write
  contents: read

jobs:
  # This first job packages the application source code into artifacts.
  package-application:
    name: '1. Create Application Packages'
    runs-on: ubuntu-latest

    # All steps in this job will run from inside the 'anvil' directory.
    defaults:
      run:
        working-directory: ./anvil

    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4

      - name: 'Run Packaging Script'
        id: package
        run: ./scripts/create_packages.sh

      - name: 'Archive Packages for Build Job'
        uses: actions/upload-artifact@v4
        with:
          name: packages
          path: anvil/dist/

  # This job builds the Web and App AMIs in parallel after packaging is complete.
  build-and-store-amis:
    name: '2. Build, Scan & Store AMIs'
    needs: package-application # This job depends on the packaging job succeeding.
    runs-on: ubuntu-latest

    # Use a matrix strategy to run the same steps for both web and app tiers in parallel.
    strategy:
      matrix:
        tier: [web, app]

    defaults:
      run:
        working-directory: ./anvil

    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4

      - name: 'Download Packaged Artifacts'
        uses: actions/download-artifact@v4
        with:
          name: packages
          path: ./dist

      - name: 'Configure AWS Credentials'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_FOR_PACKER }}
          aws-region: us-east-1

      - name: 'Setup Packer'
        uses: hashicorp/setup-packer@main
        with:
          version: 'latest'

      - name: 'Initialize Packer'
        run: packer init packer/

      - name: 'Build AMI for ${{ matrix.tier }} Tier'
        id: build
        env:
          # This passes the user's environment choice as a variable to Packer
          PKR_VAR_target_env: ${{ github.event.inputs.target_environment }}
        run: |
          # Run the correct Packer build based on the matrix tier (web or app).
          PACKER_LOG=1 packer build -machine-readable packer/${{ matrix.tier }}-server.pkr.hcl > packer-output.log
          
          # This command safely extracts the new AMI ID from the Packer log file.
          AMI_ID=$(grep -oE 'artifact,0,id,,[a-z0-9-:]*$' packer-output.log | cut -d ',' -f 5 | cut -d ':' -f 2)
          
          if [ -z "$AMI_ID" ]; then
            echo "Error: Failed to extract AMI ID from Packer output." >&2
            exit 1
          fi

          echo "New AMI ID for ${{ matrix.tier }} is: $AMI_ID"
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV
          
      - name: 'Store AMI ID in SSM Parameter Store with Git Commit Hash'
        run: |
          # Get the short Git commit hash to use as the version tag.
          GIT_HASH=$(git rev-parse --short HEAD)
          
          # The parameter name is now versioned by the commit hash.
          # Example: /anvil/ami/web/7a4a2ae
          SSM_PARAMETER_NAME="/anvil/ami/${{ matrix.tier }}/$GIT_HASH"
          
          echo "Storing AMI ID (${{ env.AMI_ID }}) in SSM Parameter: $SSM_PARAMETER_NAME"
          aws ssm put-parameter \
            --name "$SSM_PARAMETER_NAME" \
            --value "${{ env.AMI_ID }}" \
            --type "String" \
            --description "Golden AMI for ${{ matrix.tier }} tier, built from commit $GIT_HASH for the ${{ github.event.inputs.target_environment }} environment" \
            --overwrite
